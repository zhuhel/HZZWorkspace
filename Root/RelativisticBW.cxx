/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

// Your description goes here...

#include "Riostream.h"

#include "HZZWorkspace/RelativisticBW.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include <math.h>
#include "TMath.h"
#include <cmath>

//-----------------------------------------------------------------------------
// PDF class to build relativistic Breit-Wigner for high mass search
// -- takes acceptance into account
//-----------------------------------------------------------------------------
ClassImp(RelativisticBW)

    RelativisticBW::RelativisticBW(const char *name, const char *title,
            RooAbsReal& _x,
            RooAbsReal& _mH,
            RooAbsReal& _w_fr,
            RooAbsReal& _a0acc,
            RooAbsReal& _a1acc,
            RooAbsReal& _a2acc,
            RooAbsReal& _a3acc
            ) :
        RooAbsPdf(name,title),
        x("x","x",this,_x),
        mH("mH","mH",this,_mH),
        w_fr("w_fr","w_fr",this,_w_fr),
        a0acc("a0acc","a0acc",this,_a0acc),
        a1acc("a1acc","a1acc",this,_a1acc),
        a2acc("a2acc","a2acc",this,_a2acc),
        a3acc("a2acc","a2acc",this,_a3acc)
{
}


RelativisticBW::RelativisticBW(const RelativisticBW& other, const char* name) :
    RooAbsPdf(other,name),
    x("x",this,other.x),
    mH("mH",this,other.mH),
    w_fr("w_fr",this,other.w_fr),
    a0acc("a0acc",this,other.a0acc),
    a1acc("a1acc",this,other.a1acc),
    a2acc("a2acc",this,other.a2acc),
    a3acc("a3acc",this,other.a3acc)
{
}

Double_t RelativisticBW::evaluate() const
{

    // Double_t width = w_fr * mH;

    Double_t mH_cmplx = mH * sqrt(1+w_fr*w_fr);
    // Double_t wH_cmplx = mH_cmplx * w_fr;

    Double_t A = 1;
    Double_t B = std::pow((x*x-mH_cmplx*mH_cmplx),2) + std::pow((x*x*w_fr),2);
    Double_t Propag = A/B;

    Double_t Lgg = pow((1-pow((x/13000),(1./3))),8.95) * pow((x/13000),-4.1) * (-2.95e-10 + 1.32e-7*(x/13000) -1.7e-7*pow((x/13000), 2));


    Double_t G_gg = std::pow(x,3);
    Double_t tau = std::pow(x/(2*173.34),2);
    Double_t f=0;
    Double_t A_f = 0;
    if (tau<=1) {
        f = TMath::ASin(sqrt(tau));
        f = std::pow(f,2);
        A_f = 2*(tau + (tau-1)*f)/tau/tau;
        G_gg *= A_f*A_f;
    }
    else {
        f = 0.5*(TMath::Log((1+sqrt(1-1/tau)) / (1-sqrt(1-1/tau))));
        Double_t l_2 = std::pow(TMath::Log((1+sqrt(1-1/tau)) / (1-sqrt(1-1/tau))),2);
        Double_t pi_2 = TMath::Pi()*TMath::Pi();
        Double_t tau_1 = tau - 1;
        G_gg *= 4*(tau*tau + tau_1*tau_1*(std::pow(l_2-pi_2,2)+4*l_2*pi_2)/16 - 0.5*tau*tau_1*(l_2-pi_2));
        G_gg = G_gg/std::pow(tau,4);
    }

    Double_t G_zz = 1;
    G_zz *= std::pow(x,3) * std::pow((1-std::pow(2*91.2/x,2)),1/2) * (1-std::pow(2*91.2/x,2)+0.75*std::pow(2*91.2/x,4)) * (x>2*91.2);

    double result(1);
    result *=  Lgg * std::pow(x,1) * G_gg * Propag * G_zz;

    result *=  (a0acc + a1acc*x + a2acc*x*x + a3acc*x*x*x);

    if (x<0 || result<0 || std::isnan(result)) return 0.;

    return result;
}
