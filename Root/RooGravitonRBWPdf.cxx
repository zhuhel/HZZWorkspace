/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

// Your description goes here...

#include "Riostream.h"

#include "HZZWorkspace/RooGravitonRBWPdf.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include <math.h>
#include "TMath.h"

ClassImp(RooGravitonRBWPdf)

RooGravitonRBWPdf::RooGravitonRBWPdf(const char *name, const char *title,
                                     RooAbsReal &_x,
                                     RooAbsReal &_m,
                                     RooAbsReal &_g)
    : RooAbsPdf(name, title),
      x("x", "x", this, _x),
      m("m", "m", this, _m),
      g("g", "g", this, _g)
{
}

RooGravitonRBWPdf::RooGravitonRBWPdf(const RooGravitonRBWPdf &other, const char *name)
    : RooAbsPdf(other, name),
      x("x", this, other.x),
      m("m", this, other.m),
      g("g", this, other.g)
{
}

Double_t RooGravitonRBWPdf::evaluate() const
{
    Double_t Lgg = L_gg((Double_t)x);
    Double_t mat_el = x*x * x * (1 + x) * (1 + 2*x + 2*x*x);
    Double_t result = Lgg * mat_el / (pow(x*x - m*m, 2) + m*m * g*g);
    
    return result;
}

/**
 * Gluon-gluon parton luminosity (NNPDF23LO)
 *
 * Retrieved from https://apfel.mi.infn.it/
 * See 'data/NNPDF23 LO AS 0119 QED luminosities.C' for values
 *
 * PDF Parameters:
 *  - PDF Set: NNPDF23_lo_as_0119_qed
 *  - Library for evolution: LHAPDF6
 *  - CoM Energy: 13 TeV
 */
Double_t RooGravitonRBWPdf::L_gg(Double_t x) const
{
    double m[300] = {
        100, 101.2414, 102.4982, 103.7706, 105.0588, 106.3629, 107.6833, 109.0201,
        110.3734, 111.7436, 113.1307, 114.5351, 115.9569, 117.3964, 118.8537,
        120.3292, 121.8229, 123.3352, 124.8663, 126.4163, 127.9856, 129.5744,
        131.1829, 132.8114, 134.4601, 136.1293, 137.8191, 139.53, 141.2621, 143.0157,
        144.7911, 146.5885, 148.4082, 150.2505, 152.1157, 154.004, 155.9158, 157.8513,
        159.8109, 161.7947, 163.8032, 165.8366, 167.8953, 169.9795, 172.0896,
        174.2259, 176.3887, 178.5784, 180.7952, 183.0396, 185.3118, 187.6122,
        189.9412, 192.2991, 194.6862, 197.103, 199.5498, 202.027, 204.5349, 207.074,
        209.6446, 212.2471, 214.8818, 217.5494, 220.25, 222.9841, 225.7522, 228.5546,
        231.3919, 234.2643, 237.1724, 240.1166, 243.0974, 246.1152, 249.1704,
        252.2636, 255.3951, 258.5655, 261.7753, 265.0249, 268.3149, 271.6457,
        275.0179, 278.4319, 281.8883, 285.3876, 288.9304, 292.5171, 296.1483,
        299.8247, 303.5466, 307.3148, 311.1297, 314.9921, 318.9023, 322.8611, 326.869,
        330.9267, 335.0348, 339.1938, 343.4045, 347.6675, 351.9834, 356.3528,
        360.7765, 365.2551, 369.7893, 374.3798, 379.0273, 383.7325, 388.4961,
        393.3188, 398.2014, 403.1446, 408.1491, 413.2158, 418.3454, 423.5386,
        428.7964, 434.1194, 439.5084, 444.9644, 450.4881, 456.0804, 461.7421,
        467.4741, 473.2772, 479.1524, 485.1005, 491.1224, 497.2191, 503.3915,
        509.6405, 515.9671, 522.3722, 528.8568, 535.422, 542.0686, 548.7977, 555.6104,
        562.5076, 569.4905, 576.56, 583.7174, 590.9635, 598.2996, 605.7268, 613.2462,
        620.8589, 628.5661, 636.369, 644.2688, 652.2666, 660.3637, 668.5614, 676.8607,
        685.2632, 693.7699, 702.3822, 711.1015, 719.9289, 728.866, 737.914, 747.0743,
        756.3484, 765.7375, 775.2432, 784.867, 794.6102, 804.4743, 814.4609, 824.5714,
        834.8075, 845.1707, 855.6624, 866.2845, 877.0384, 887.9257, 898.9483,
        910.1077, 921.4056, 932.8437, 944.4239, 956.1478, 968.0172, 980.034, 992.1999,
        1004.517, 1016.987, 1029.611, 1042.393, 1055.333, 1068.434, 1081.697,
        1095.125, 1108.72, 1122.483, 1136.417, 1150.525, 1164.807, 1179.267, 1193.906,
        1208.727, 1223.732, 1238.923, 1254.303, 1269.873, 1285.637, 1301.597,
        1317.755, 1334.113, 1350.674, 1367.442, 1384.417, 1401.603, 1419.002,
        1436.617, 1454.451, 1472.506, 1490.786, 1509.292, 1528.028, 1546.997,
        1566.201, 1585.643, 1605.327, 1625.255, 1645.431, 1665.857, 1686.537,
        1707.473, 1728.669, 1750.129, 1771.854, 1793.85, 1816.118, 1838.663, 1861.488,
        1884.596, 1907.991, 1931.677, 1955.656, 1979.933, 2004.512, 2029.395,
        2054.588, 2080.093, 2105.915, 2132.058, 2158.525, 2185.32, 2212.448, 2239.913,
        2267.719, 2295.87, 2324.37, 2353.225, 2382.437, 2412.012, 2441.955, 2472.269,
        2502.959, 2534.03, 2565.487, 2597.335, 2629.577, 2662.22, 2695.269, 2728.727,
        2762.601, 2796.896, 2831.616, 2866.767, 2902.354, 2938.384, 2974.86, 3011.789,
        3049.177, 3087.029, 3125.351, 3164.148, 3203.428, 3243.194, 3283.455,
        3324.215, 3365.481, 3407.259, 3449.557, 3492.379, 3535.732, 3579.624,
        3624.061, 3669.049, 3714.596, 3760.709, 3807.393, 3854.658, 3902.509,
        3950.954, 4000
    };

    double y[300]= {
        0.04516702, 0.04323648, 0.04138552, 0.03961908, 0.03790972, 0.03627882,
        0.03472218, 0.03321759, 0.03178175, 0.03040573, 0.02908748, 0.027824,
        0.02661365, 0.02545407, 0.02434306, 0.02327912, 0.02225973, 0.02128355,
        0.02035331, 0.01945381, 0.01859628, 0.0177754, 0.01698963, 0.01623745,
        0.01551719, 0.01483808, 0.01416865, 0.01353746, 0.01293337, 0.01235537,
        0.01180224, 0.01127293, 0.01076661, 0.01028469, 0.009818571, 0.009374997,
        0.008950686, 0.008544807, 0.00815677, 0.007785231, 0.007430046, 0.007090573,
        0.006765939, 0.006455604, 0.006158958, 0.005875366, 0.005604437, 0.005345384,
        0.005097915, 0.004861457, 0.004635497, 0.004419788, 0.00421365, 0.004016784,
        0.00382877, 0.003649933, 0.003477684, 0.003313937, 0.003157584, 0.003008345,
        0.002865874, 0.002729924, 0.00260095, 0.002476406, 0.002358266, 0.002245616,
        0.002138203, 0.00203568, 0.001937977, 0.001844782, 0.001755937, 0.001671262,
        0.001590452, 0.001513435, 0.001440047, 0.001370061, 0.00130338, 0.001239828,
        0.001179267, 0.001121563, 0.001066582, 0.001014213, 0.0009643389,
        0.0009168037, 0.0008715316, 0.0008284178, 0.0007876647, 0.000748292,
        0.0007110749, 0.0006756443, 0.0006419268, 0.0006098202, 0.0005792634,
        0.0005501878, 0.0005225259, 0.0004962287, 0.0004711491, 0.0004473253,
        0.000424659, 0.0004031025, 0.0003826, 0.000363103, 0.0003445664, 0.0003269396,
        0.0003101819, 0.0002942621, 0.0002791147, 0.0002647256, 0.0002510533,
        0.0002380555, 0.0002257119, 0.0002139833, 0.0002028408, 0.0001923565,
        0.000182209, 0.0001726642, 0.0001636007, 0.0001549945, 0.0001468267,
        0.0001391446, 0.0001317121, 0.0001247274, 0.0001181005, 0.0001118111,
        0.00010589, 0.000100184, 9.481493e-05, 8.972502e-05, 8.489584e-05,
        8.031562e-05, 7.597465e-05, 7.185875e-05, 6.799524e-05, 6.42931e-05,
        6.075599e-05, 5.743582e-05, 5.429077e-05, 5.131036e-05, 4.848754e-05,
        4.581404e-05, 4.328223e-05, 4.088472e-05, 3.861455e-05, 3.646593e-05,
        3.44327e-05, 3.2507e-05, 3.068484e-05, 2.896203e-05, 2.733132e-05,
        2.578873e-05, 2.432898e-05, 2.295028e-05, 2.164577e-05, 2.041212e-05,
        1.92464e-05, 1.814418e-05, 1.710255e-05, 1.611834e-05, 1.518849e-05,
        1.431005e-05, 1.348008e-05, 1.269629e-05, 1.19564e-05, 1.125787e-05,
        1.059849e-05, 9.976166e-06, 9.388293e-06, 8.833926e-06, 8.310845e-06,
        7.817538e-06, 7.352193e-06, 6.913368e-06, 6.499613e-06, 6.109323e-06,
        5.741822e-06, 5.395323e-06, 5.068793e-06, 4.761159e-06, 4.471402e-06,
        4.198492e-06, 3.941464e-06, 3.699506e-06, 3.471744e-06, 3.257387e-06,
        3.055619e-06, 2.865741e-06, 2.68724e-06, 2.519303e-06, 2.361374e-06,
        2.212868e-06, 2.073306e-06, 1.942116e-06, 1.818863e-06, 1.703047e-06,
        1.594293e-06, 1.492097e-06, 1.396183e-06, 1.306106e-06, 1.221601e-06,
        1.142278e-06, 1.067867e-06, 9.980553e-07, 9.326035e-07, 8.712049e-07,
        8.136855e-07, 7.597528e-07, 7.092246e-07, 6.618852e-07, 6.175314e-07,
        5.760326e-07, 5.371651e-07, 5.008001e-07, 4.667532e-07, 4.34907e-07,
        4.051202e-07, 3.772676e-07, 3.512309e-07, 3.268981e-07, 3.041572e-07,
        2.829195e-07, 2.630856e-07, 2.445636e-07, 2.27275e-07, 2.111442e-07,
        1.960896e-07, 1.820583e-07, 1.689725e-07, 1.567748e-07, 1.454073e-07,
        1.348202e-07, 1.249573e-07, 1.157769e-07, 1.072309e-07, 9.92812e-08,
        9.188534e-08, 8.500797e-08, 7.86152e-08, 7.267513e-08, 6.71579e-08,
        6.203368e-08, 5.727897e-08, 5.2864e-08, 4.87691e-08, 4.49734e-08,
        4.145272e-08, 3.81926e-08, 3.517158e-08, 3.237548e-08, 2.978716e-08,
        2.73924e-08, 2.517804e-08, 2.313138e-08, 2.124003e-08, 1.949317e-08,
        1.788057e-08, 1.639307e-08, 1.502084e-08, 1.37557e-08, 1.259021e-08,
        1.151619e-08, 1.052789e-08, 9.618585e-09, 8.782579e-09, 8.01421e-09,
        7.30823e-09, 6.660047e-09, 6.06543e-09, 5.519888e-09, 5.020039e-09,
        4.562196e-09, 4.143122e-09, 3.759615e-09, 3.40912e-09, 3.088795e-09,
        2.796388e-09, 2.529597e-09, 2.286374e-09, 2.064766e-09, 1.86297e-09,
        1.679431e-09, 1.512594e-09, 1.361035e-09, 1.223521e-09, 1.098821e-09,
        9.858356e-10, 8.835506e-10, 7.910344e-10, 7.074631e-10, 6.32038e-10,
        5.63998e-10, 5.026941e-10, 4.475298e-10, 3.979347e-10, 3.533958e-10,
        3.134325e-10, 2.776312e-10, 2.455895e-10, 2.169382e-10, 1.913703e-10,
        1.685739e-10
    };

    // Interpolate
    for (int i=0; i<298; i++) {
        if (x>=m[i+0] && x<=m[i+1])
            return (
                y[i+1]
                - ((y[i]-y[i+1]-(y[i+2]-y[i+1])*((m[i]*m[i]-m[i+1]*m[i+1])/(m[i+2]*m[i+2]-m[i+1]*m[i+1])))/(m[i]-m[i+1]-(m[i+2]-m[i+1])*((m[i]*m[i]-m[i+1]*m[i+1])/(m[i+2]*m[i+2]-m[i+1]*m[i+1]))))*m[i+1]
                - ((y[i]-y[i+1]-(y[i+2]-y[i+1])*((m[i]-m[i+1])/(m[i+2]-m[i+1])))/(m[i]*m[i]-m[i+1]*m[i+1]-(m[i+2]*m[i+2]-m[i+1]*m[i+1])*((m[i]-m[i+1])/(m[i+2]-m[i+1]))))*m[i+1]*m[i+1]
                + ((y[i]-y[i+1]-(y[i+2]-y[i+1])*((m[i]*m[i]-m[i+1]*m[i+1])/(m[i+2]*m[i+2]-m[i+1]*m[i+1])))/(m[i]-m[i+1]-(m[i+2]-m[i+1])*((m[i]*m[i]-m[i+1]*m[i+1])/(m[i+2]*m[i+2]-m[i+1]*m[i+1]))))*x
                + ((y[i]-y[i+1]-(y[i+2]-y[i+1])*((m[i]-m[i+1])/(m[i+2]-m[i+1])))/(m[i]*m[i]-m[i+1]*m[i+1]-(m[i+2]*m[i+2]-m[i+1]*m[i+1])*((m[i]-m[i+1])/(m[i+2]-m[i+1]))))*x*x
            );
    }

    if (x>=m[298] && x<=m[299]) {
        int i = 297;
        return (
            y[i+1]
            - ((y[i]-y[i+1]-(y[i+2]-y[i+1])*((m[i]*m[i]-m[i+1]*m[i+1])/(m[i+2]*m[i+2]-m[i+1]*m[i+1])))/(m[i]-m[i+1]-(m[i+2]-m[i+1])*((m[i]*m[i]-m[i+1]*m[i+1])/(m[i+2]*m[i+2]-m[i+1]*m[i+1]))))*m[i+1]
            - ((y[i]-y[i+1]-(y[i+2]-y[i+1])*((m[i]-m[i+1])/(m[i+2]-m[i+1])))/(m[i]*m[i]-m[i+1]*m[i+1]-(m[i+2]*m[i+2]-m[i+1]*m[i+1])*((m[i]-m[i+1])/(m[i+2]-m[i+1]))))*m[i+1]*m[i+1]
            + ((y[i]-y[i+1]-(y[i+2]-y[i+1])*((m[i]*m[i]-m[i+1]*m[i+1])/(m[i+2]*m[i+2]-m[i+1]*m[i+1])))/(m[i]-m[i+1]-(m[i+2]-m[i+1])*((m[i]*m[i]-m[i+1]*m[i+1])/(m[i+2]*m[i+2]-m[i+1]*m[i+1]))))*x
            + ((y[i]-y[i+1]-(y[i+2]-y[i+1])*((m[i]-m[i+1])/(m[i+2]-m[i+1])))/(m[i]*m[i]-m[i+1]*m[i+1]-(m[i+2]*m[i+2]-m[i+1]*m[i+1])*((m[i]-m[i+1])/(m[i+2]-m[i+1]))))*x*x
        );
    }

    if (x>m[299])
        return y[299];
    else if (x<m[0])
        return y[0];
    else
        return 1;
}
